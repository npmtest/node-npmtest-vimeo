{"/home/travis/build/npmtest/node-npmtest-vimeo/test.js":"/* istanbul instrument in package npmtest_vimeo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vimeo/lib.npmtest_vimeo.js":"/* istanbul instrument in package npmtest_vimeo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vimeo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vimeo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vimeo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vimeo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vimeo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vimeo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vimeo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_vimeo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vimeo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_vimeo.__dirname + '/lib.npmtest_vimeo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vimeo/node_modules/vimeo/index.js":"/**\n *   Copyright 2013 Vimeo\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\nvar vimeo_module = require('./lib/vimeo');\nmodule.exports.vimeo_module = vimeo_module;\nmodule.exports.Vimeo = vimeo_module.Vimeo;\n","/home/travis/build/npmtest/node-npmtest-vimeo/node_modules/vimeo/lib/vimeo.js":"\"use strict\";\n\n/**\n *   Copyright 2013 Vimeo\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\nvar qs_module = require('querystring');\nvar url_module = require('url');\nvar crypto_module = require('crypto');\nvar http_module = require('http');\nvar https_module = require('https');\nvar FileStreamer = require('./filestreamer');\n\nmodule.exports.request_defaults = {\n\tprotocol : 'https:',\n\thostname : 'api.vimeo.com',\n\tport : 443,\n\tmethod : 'GET',\n\tquery : {},\n\theaders : {\n\t\tAccept: \"application/vnd.vimeo.*+json;version=3.2\",\n\t\t'User-Agent': 'Vimeo.js/1.2.1'\n\t}\n};\n\nvar auth_endpoints = module.exports.auth_endpoints = {\n\tauthorization : '/oauth/authorize',\n\taccessToken : '/oauth/access_token',\n\tclientCredentials : '/oauth/authorize/client'\n};\n\n/**\n * This object is used to interface with the vimeo api\n *\n * @param {string} client_id     OAuth 2 Client Identifier\n * @param {string} client_secret OAuth 2 Client Secret\n * @param (string) access_token  OAuth 2 Optional pre-authorized access token\n */\nvar Vimeo = module.exports.Vimeo = function Vimeo (client_id, client_secret, access_token) {\n\tthis._client_id = client_id;\n\tthis._client_secret = client_secret;\n\n\tif (access_token) {\n\t\tthis.access_token = access_token;\n\t}\n};\n\nVimeo.prototype._client_id = null;\nVimeo.prototype._client_secret = null;\nVimeo.prototype.access_token = null;\n\n/**\n * Performs an api call.\n * Can be called one of two ways.\n * 1. Url + Callback\n *     If a url is provided, we fill in the rest of the request options with defaults (GET http://api.vimeo.com/{url}).\n *\n * 2. Options + callback\n *     If an object is provided, it should match the response of url_module.parse. Path is the only required parameter.\n *\n *     hostname\n *     port\n *     query (will be applied to the url if GET, request body if POST)\n *     headers\n *     path (can include a querystring)\n *     method\n *\n * The callback takes two parameters, err and json.\n * If an error has occured, your callback will be called as callback(err);\n * If an error has not occured, your callback will be called as callback(null, json);\n *\n * @param {String|Object} options string path (default GET), or object with path, host, port, query, headers\n * @param {Function} callback called when complete, function (err, json)\n */\nVimeo.prototype.request = function vimeo_request (options, callback) {\n\tvar client = null;\n\n\t// if a url was provided, build an options object\n\tif (typeof options === \"string\") {\n\t\toptions = url_module.parse(options, true);\n\t\toptions.method = \"GET\";\n\t}\n\n\t// if we don't have a path at this point, error. a path is the only required field. we have defaults for everything else important\n\tif (typeof options.path !== \"string\") {\n\t\treturn callback(new Error('You must provide an api path'));\n\t}\n\n\t// Add leading slash to path if missing\n\tif (options.path.charAt(0) !== '/') {\n\t\toptions.path = '/' + options.path;\n\t}\n\n\t// Turn the provided options into options that are valid for client.request\n\tvar request_options = this._buildRequestOptions(options);\n\n\t// Locate the proper client from the request protocol\n\tclient = request_options.protocol === 'https:' ? https_module : http_module;\n\n\t// Write the request body\n\tif (['POST','PATCH','PUT','DELETE'].indexOf(request_options.method) !== -1) {\n\t\tif (request_options.headers['Content-Type'] === 'application/json') {\n\t\t\trequest_options.body = JSON.stringify(options.query);\n\t\t} else {\n\t\t\trequest_options.body = qs_module.stringify(options.query);\n\t\t}\n\n\t\tif (request_options.body) {\n\t\t\trequest_options.headers['Content-Length'] = Buffer.byteLength(request_options.body, 'utf8');\n\t\t} else {\n\t\t\trequest_options.headers['Content-Length'] = 0;\n\t\t}\n\t}\n\n\t// Perform the vimeo api request\n\tvar req = client.request(request_options, this._handleRequest(callback));\n\n\t// Write the request body\n\tif (request_options.body) {\n\t\treq.write(request_options.body);\n\t}\n\n\t// notify user of any weird connection/request errors\n\treq.on('error', function(e) {\n\t\tcallback(e);\n\t});\n\n\t// send the request\n\treq.end();\n};\n\n/**\n * Creates the standard request handler for http requests\n *\n * @param  {Function} callback\n * @return {Function}\n */\nVimeo.prototype._handleRequest = function (callback) {\n\treturn function (res) {\n\t\tres.setEncoding('utf8');\n\n\t\tvar buffer = '';\n\n\t\tres.on('readable', function () {\n\t\t\tbuffer += res.read() || '';\n\t\t});\n\n\t\tif (res.statusCode >= 400) {\n\t\t\t// failed api calls should wait for the response to end and then call the callback with an error.\n\t\t\tres.on('end', function () {\n\t\t\t\tvar err = new Error(buffer);\n\t\t\t\tcallback(err, buffer, res.statusCode, res.headers);\n\t\t\t});\n\t\t} else {\n\t\t\t// successful api calls should wait for the response to end and then call the callback with the response body\n\t\t\tres.on('end', function () {\n\t\t\t\ttry {\n\t\t\t\t\tvar body = buffer.length ? JSON.parse(buffer) : {};\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn callback(buffer, buffer, res.statusCode, res.headers);\n\t\t\t\t}\n\t\t\t\tcallback(null, body, res.statusCode, res.headers);\n\t\t\t});\n\t\t}\n\t};\n};\n\n/**\n * Merge the request options defaults into the request options\n *\n * @param  {Object} options\n * @return {Object}\n */\nVimeo.prototype._buildRequestOptions = function (options) {\n\t// set up the request object. we always use the options paramter first, and if no value is provided we fall back to request defaults\n\tvar request_options = this._applyDefaultRequestOptions(options);\n\n\t// Apply the access tokens\n\tif (this.access_token) {\n\t\trequest_options.headers.Authorization = 'Bearer ' + this.access_token;\n\t} else if (this._client_id && this._client_secret) {\n\t\trequest_options.headers.Authorization = 'Basic ' + new Buffer(this._client_id + ':' + this._client_secret).toString('base64');\n\t}\n\n\t// Set proper headers for POST, PATCH and PUT bodies\n\tif (['POST','PATCH','PUT','DELETE'].indexOf(request_options.method) !== -1 && !request_options.headers['Content-Type']) {\n\t\trequest_options.headers['Content-Type'] = 'application/json';\n\n\t// Apply parameters to the url for GET requests\n\t} else if (request_options.method === 'GET') {\n\t\trequest_options.path = this._applyQuerystringParams(request_options, options);\n\t}\n\n\treturn request_options;\n}\n\n/**\n * Create an object of request options based on the provided list of options, and the request defaults.\n *\n * @param  {Object} options\n * @return {Object}\n */\nVimeo.prototype._applyDefaultRequestOptions = function (options) {\n\tvar request_options = {\n\t\tprotocol : options.protocol || module.exports.request_defaults.protocol,\n\t\thost : options.hostname || module.exports.request_defaults.hostname,\n\t\tport : options.port || module.exports.request_defaults.port,\n\t\tmethod : options.method || module.exports.request_defaults.method,\n\t\theaders : options.headers || {},\n\t\tbody : '',\n\t\tpath : options.path\n\t};\n\tvar key = null;\n\n\t// Apply the default headers\n\tif (module.exports.request_defaults.headers) {\n\t\tfor (key in module.exports.request_defaults.headers) {\n\t\t\tif (!request_options.headers[key]) {\n\t\t\t\trequest_options.headers[key] = module.exports.request_defaults.headers[key];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn request_options;\n}\n\n/**\n * Apply the query parameter onto the final request url\n *\n * @param  {Object} request_options\n * @param  {Object} options\n * @return {String}\n */\nVimeo.prototype._applyQuerystringParams = function (request_options, options) {\n\tvar querystring = '';\n\n\tif (!options.query) {\n\t\treturn request_options.path;\n\t}\n\n\t// If we have parameters, apply them to the url\n\tif (Object.keys(options.query).length) {\n\t\tif (request_options.path.indexOf('?') < 0) {\n\t\t\t// If the existing path does not contain any parameters, apply them as the only options\n\t\t\tquerystring = '?' + qs_module.stringify(options.query);\n\t\t} else {\n\t\t\t// If the user already added parameters to the url, we want to add them as additional parameters\n\t\t\tquerystring = '&' + qs_module.stringify(options.query);\n\t\t}\n\t}\n\n\treturn request_options.path + querystring;\n}\n\n\n/**\n * Exchange a code for an access token. This code should exist on your redirect_uri\n *\n * @param  {String} code the code provided on your redirect_uri\n * @param  {String} redirect_uri the exact redirect_uri provided to buildAuthorizationEndpoint and configured in your api app settings\n * @return {null}\n */\nVimeo.prototype.accessToken = function (code, redirect_uri, fn) {\n\tvar _self = this;\n\n\tthis.request({\n\t\tmethod : 'POST',\n\t\thostname : module.exports.request_defaults.hostname,\n\t\tpath : auth_endpoints.accessToken,\n\t\tquery : {\n\t\t\tgrant_type : 'authorization_code',\n\t\t\tcode : code,\n\t\t\tredirect_uri : redirect_uri\n\t\t},\n\t\theaders : {\n\t\t\t'Content-Type' : 'application/x-www-form-urlencoded'\n\t\t}\n\t}, function (err, body, status, headers) {\n\t\tif (err) {\n\t\t\treturn fn(err, null, status, headers);\n\t\t} else {\n\t\t\tfn(null, body, status, headers);\n\t\t}\n\t});\n};\n\n\n/**\n * The first step of the authorization process.\n *\n * This function returns a url, which the user should be sent to (via redirect or link).\n * The destination allows the user to accept or deny connecting with vimeo, and accept or deny each of the scopes you requested.\n * Scopes are passed through the second parameter as an array of strings, or a space delimited list.\n *\n * Once accepted or denied, the user is redirected back to the redirect_uri.\n * If accepted, the redirect url will\n *\n * @param  {String} redirect_uri The uri that will exchange a code for an access token. Must match the uri in your app settings.\n * @param  {String} scope        An array of scopes. see https://developer.vimeo.com/api/authentication#scopes for more\n * @param  {String} state        A random state that will be returned to you on your redirect uri.\n */\nVimeo.prototype.buildAuthorizationEndpoint = function (redirect_uri, scope, state) {\n\tvar query = {\n\t\tresponse_type : 'code',\n\t\tclient_id : this._client_id,\n\t\tredirect_uri : redirect_uri\n\t};\n\n\tif (scope) {\n\t\tif (Array.isArray(scope)) {\n\t\t\tquery.scope = scope.join(' ');\n\t\t} else {\n\t\t\tquery.scope = scope;\n\t\t}\n\t} else {\n\t\tquery.scope = 'public';\n\t}\n\n\tif (state) {\n\t\tquery.state = state;\n\t}\n\n\treturn module.exports.request_defaults.protocol + '//' + module.exports.request_defaults.hostname + auth_endpoints.authorization + '?' + qs_module.stringify(query);\n};\n\n/**\n * Generates an unauthenticated access token. This is necessary to make unauthenticated requests\n *\n * @param  {string}   scope An array of scopes. see https://developer.vimeo.com/api/authentication#scopes for more\n * @param  {Function} fn    A function that is called when the request is complete. If an error occured the first parameter will be that error, otherwise the first parameter will be null.\n */\nVimeo.prototype.generateClientCredentials = function (scope, fn) {\n\tvar query =  {\n\t\tgrant_type : 'client_credentials',\n\t}\n\n\tif (scope) {\n\t\tif (Array.isArray(scope)) {\n\t\t\tquery.scope = scope.join(' ');\n\t\t} else {\n\t\t\tquery.scope = scope;\n\t\t}\n\t} else {\n\t\tquery.scope = 'public';\n\t}\n\n\tthis.request({\n\t\tmethod : 'POST',\n\t\thostname : module.exports.request_defaults.hostname,\n\t\tpath : auth_endpoints.clientCredentials,\n\t\tquery : query,\n\t\theaders : {\n\t\t\t'Content-Type' : 'application/x-www-form-urlencoded'\n\t\t}\n\t}, function (err, body, status, headers) {\n\t\tif (err) {\n\t\t\treturn fn(err, null, status, headers);\n\t\t} else {\n\t\t\tfn(null, body, status, headers);\n\t\t}\n\t});\n}\n\n/**\n * Initiate streaming uploads\n *\n * @param  {string}   path      The path to the file you wish to upload\n * @param  {Function} callback  A function that is called when the upload is complete, or fails.\n */\nVimeo.prototype.streamingUpload = function (path, video_uri, callback, progress_callback) {\n\tvar _self = this;\n\n\tif (typeof video_uri === 'function') {\n\t\tprogress_callback = callback;\n\t\tcallback = video_uri;\n\t\tvideo_uri = undefined;\n\t}\n\n\tvar options = {\n\t\tmethod : video_uri ? 'PUT' : 'POST',\n\t\tpath : video_uri ? video_uri + '/files' : '/me/videos',\n\t\tquery : {\n\t\t\ttype : 'streaming'\n\t\t}\n\t};\n\n\tthis.request(options, function (err, ticket, status, headers) {\n\t\tif (err) {\n\t\t\treturn callback(err);\n\t\t}\n\n\t\tvar file = new FileStreamer(path, ticket.upload_link_secure, progress_callback);\n\n\t\tfile.ready(function () {\n\t\t\t_self.request({\n\t\t\t\tmethod : 'DELETE',\n\t\t\t\tpath : ticket.complete_uri\n\t\t\t}, callback);\n\t\t});\n\n\t\tfile.error(callback);\n\t\tfile.upload();\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-vimeo/node_modules/vimeo/lib/filestreamer.js":"\"use strict\";\n\n/**\n *   Copyright 2013 Vimeo\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\nvar url_module = require('url');\nvar fs_module = require('fs');\nvar https_module = require('https');\nvar http_module = require('http');\n\n/**\n * This object facilitates resumable uploading\n * \n * @param {string} file_path       Path to the video file\n * @param {string} upload_endpoint upload URL provided with an upload ticket\n */\nvar FileStreamer = module.exports = function FileStreamer(file_path, upload_endpoint, progress_callback) {\n\tif (!file_path) {\n\t\tthrow new Error('You must provide a file path');\n\t}\n\n\tif (!upload_endpoint) {\n\t\tthrow new Error('You must provide an upload endpoint');\n\t}\n\n\tthis._endpoint = url_module.parse(upload_endpoint);\n\tthis._path = file_path;\n\tthis.progress_callback = progress_callback;\n}\n\nFileStreamer.prototype._endpoint = null;\nFileStreamer.prototype._path = null;\nFileStreamer.prototype._fd = null;\nFileStreamer.prototype._file_size = 0;\nFileStreamer.prototype.percentage = 0;\nFileStreamer.prototype.sequential = true;\nFileStreamer.prototype.progress_callback = null;\n\n/**\n * Holds the user defined ready function. Do not call this outside of the library\n */\nFileStreamer.prototype._user_ready = function () {\n\tthis.ready = function (fn) {\n\t\tfn();\n\t}\n};\n\n/**\n * Called internally whenever the upload might be complete. \n * If the upload is complete it will call _user_ready, if not it will attempt to upload from where it left off.\n *\n * Do not call this outside of the library.\n */\nFileStreamer.prototype._ready = function () {\n\tvar _self = this;\n\n\t// If we think we are ready to complete, check with the server and see if they have the whole file\n\tthis._getNewStart(function (err, start) {\n\t\tif (err) {\n\t\t\t// If the check fails, close the file and error out immediately\n\t\t\t_self._closeFile();\n\t\t\treturn _self._error(err);\n\t\t}\n\n\t\tif (start >= _self._file_size) {\n\t\t\t// If the server says they have the whole file, close it and then return back to the user\n\t\t\t_self._closeFile()\n\t\t\t_self._user_ready();\n\t\t} else {\n\t\t\t// If the server does not have the whole file, upload from where we left off\n\t\t\t_self._streamChunk(start);\n\t\t}\n\t});\n};\n\n/**\n * Assign a callback to be called whenever the file is done uploading.\n * \n * @param  {Function} fn The ready callback\n */\nFileStreamer.prototype.ready = function (fn) {\n\tthis._user_ready = fn;\n};\n\n/**\n * Holds the error callback. Do not call this outside of the library\n * \n * @param  {Error} error The error that was thrown\n * @return {[type]}       [description]\n */\nFileStreamer.prototype._error = function (error) {\n\tthis.error = function (fn) {\n\t\tfn(error);\n\t}\n};\n\n/**\n * Assign a callback to be called whenever an error occurs.\n * \n * @param  {Function} fn The error callback\n */\nFileStreamer.prototype.error = function (fn) {\n\tthis._error = fn;\n};\n\n/**\n * Start uploading the file\n */\nFileStreamer.prototype.upload = function () {\n\tvar _self = this;\n\n\tfs_module.stat(_self._path, function (stat_err, stats) {\n\t\tif (stat_err) {\n\t\t\treturn _self._error(stat_err);\n\t\t}\n\n\t\t_self._file_size = stats.size;\n\n\t\tfs_module.open(_self._path, 'r', function(open_err, fd) {\n\t\t\tif (open_err) {\n\t\t\t\treturn this._error(open_err);\n\t\t\t}\n\n\t\t\t_self._fd = fd;\n\t\t\t_self._streamChunk(0);\n\t\t});\n\t});\n};\n\n/**\n * Send a file chunk, starting at byte [start] and ending at the end of the file\n * \n * @param  {Number} start\n */\nFileStreamer.prototype._streamChunk = function (start) {\n\tvar _self = this;\n\t_self._putFile(start, function (put_err, code, headers) {\n\n\t\t// Catches a rare vimeo server bug and exits out early\n\t\tif (put_err && code) {\n\t\t\t_self._closeFile();\n\t\t\treturn _self._error(put_err);\n\t\t}\n\n\t\t_self._ready();\n\t});\n};\n\n/**\n * Make the HTTP put request sending a part of a file up to the upload server\n * \n * @param  {Number}   start    The first byte of the file\n * @param  {Function} callback A function which is called once the upload is complete, or has failed\n */\nFileStreamer.prototype._putFile = function (start, callback) {\n\tvar _self = this;\n\n\tvar file = fs_module.createReadStream(_self._path, {\n\t\tstart : start\n\t});\n\n\tfile.on('error', function (err) {\n\t\tcallback(err);\n\t});\n\t\n\tvar uploaded_size = start || 0;\n\n\tfile.on('data', function(chunk) {\n\t\tuploaded_size += chunk.length || 0;\n\t\tif (_self.progress_callback) {\n\t\t\t_self.progress_callback(uploaded_size, _self._file_size);\n\t\t}\n\t});\n\t\n\tvar headers =  {\n\t\t'Content-Length' : _self._file_size,\n\t\t'Content-Type' : 'video/mp4'\n\t};\n\n\theaders['Content-Range'] = 'bytes ' + start + '-' + _self._file_size + '/' + _self._file_size;\n\n\tvar req = _self._upload_endpoint_request({\n\t\tmethod : 'PUT',\n\t\theaders : headers\n\t}, callback);\n\n\tfile.pipe(req);\n};\n\n/**\n * Close the file\n */\nFileStreamer.prototype._closeFile = function () {\n\tif (this._fd) {\n\t\tfs_module.close(this._fd, function (close_err) {\n\t\t\tif (close_err) {\n\t\t\t\tthis._error(close_err);\n\t\t\t}\n\t\t});\n\t\tthis._fd = null;\n\t}\n};\n\n/**\n * Verify the file upload and determine the last most byte the server has received\n * @param  {Function} next A callback that will be called when the check is complete, or has errored\n */\nFileStreamer.prototype._getNewStart = function (next) {\n\tvar _self = this;\n\n\tthis._upload_endpoint_request({\n\t\tmethod : 'PUT',\n\t\theaders : {\n\t\t\t'Content-Range' : 'bytes */*',\n\t\t\t'Content-Type' : 'application/octet-stream'\n\t\t}\n\t}, function (err, status, headers) {\n\t\tif (err) {\n\t\t\treturn next(err);\n\t\t}\n\n\t\tif (status === 308) {\n\t\t\treturn next(null, parseInt(headers.range.split('-')[1]));\n\t\t} else {\n\t\t\treturn next(new Error('Invalid http status returned from range query: [' + status + ']'));\n\t\t}\n\t}).end();\n};\n\n/**\n * Makes an http request to the upload server, and sends the response through the callback\n * \n * @param  {Object}   options  Request options, pumped into https.request(options);\n * @param  {Function} callback Called when the upload is complete, or has failed\n */\nFileStreamer.prototype._upload_endpoint_request = function (options, callback) {\n\tvar request_options = {\n\t\tprotocol : this._endpoint.protocol,\n\t\thost : this._endpoint.hostname,\n\t\tport : this._endpoint.port,\n\t\tquery : this._endpoint.query,\n\t\theaders : options.headers,\n\t\tpath : this._endpoint.path,\n\t\tmethod : options.method\n\t};\n\n\tvar client = request_options.protocol === 'https:' ? https_module : http_module;\n\tvar req = client.request(request_options);\n\n\treq.on('response', function (res) {\n\t\tres.setEncoding('utf8');\n\n\t\tvar buffer = '';\n\t\tres.on('readable', function () {\n\t\t\tbuffer += res.read();\n\t\t});\n\n\t\tif (res.statusCode > 399) {\n\t\t\t// failed api calls should wait for the response to end and then call the callback with an error.\n\t\t\tres.on('end', function () {\n\t\t\t\tcallback(new Error('[' + buffer + ']'), res.statusCode, res.headers);\n\t\t\t});\n\t\t} else {\n\t\t\t// successful api calls should wait for the response to end and then call the callback with the response body\n\t\t\tres.on('end', function () {\n\t\t\t\tcallback(null, res.statusCode, res.headers);\n\t\t\t});\n\t\t}\n\t});\n\n\t// notify user of any weird connection/request errors\n\treq.on('error', function(e) {\n\t\tcallback(e);\n\t});\n\n\treturn req;\n};\n"}